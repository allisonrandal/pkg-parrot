.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PARROT_DEBUGGER.C 1"
.TH PARROT_DEBUGGER.C 1 "2009-03-08" "Debian Project" "Debian GNU/Linux manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
parrot_debugger \- The Parrot debugger
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& parrot_debugger programfile
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Commands"
.IX Subsection "Commands"
.ie n .IP """disassemble""" 4
.el .IP "\f(CWdisassemble\fR" 4
.IX Item "disassemble"
Disassemble the bytecode.
.Sp
Use this if you have a \s-1PBC\s0 file but not the \s-1PASM\s0.
.ie n .IP """load""" 4
.el .IP "\f(CWload\fR" 4
.IX Item "load"
Load a source code file.
.ie n .IP """list"" or ""l""" 4
.el .IP "\f(CWlist\fR or \f(CWl\fR" 4
.IX Item "list or l"
List the source code file.
.ie n .IP """run"" or ""r""" 4
.el .IP "\f(CWrun\fR or \f(CWr\fR" 4
.IX Item "run or r"
Run the program.
.ie n .IP """break"" or ""b""" 4
.el .IP "\f(CWbreak\fR or \f(CWb\fR" 4
.IX Item "break or b"
Add a breakpoint.
.ie n .IP """watch"" or ""w""" 4
.el .IP "\f(CWwatch\fR or \f(CWw\fR" 4
.IX Item "watch or w"
Add a watchpoint.
.ie n .IP """delete"" or ""d""" 4
.el .IP "\f(CWdelete\fR or \f(CWd\fR" 4
.IX Item "delete or d"
Delete a breakpoint.
.ie n .IP """disable""" 4
.el .IP "\f(CWdisable\fR" 4
.IX Item "disable"
Disable a breakpoint.
.ie n .IP """enable""" 4
.el .IP "\f(CWenable\fR" 4
.IX Item "enable"
Reenable a disabled breakpoint.
.ie n .IP """continue"" or ""c""" 4
.el .IP "\f(CWcontinue\fR or \f(CWc\fR" 4
.IX Item "continue or c"
Continue the program execution.
.ie n .IP """next"" or ""n""" 4
.el .IP "\f(CWnext\fR or \f(CWn\fR" 4
.IX Item "next or n"
Run the next instruction
.ie n .IP """eval"" or ""e""" 4
.el .IP "\f(CWeval\fR or \f(CWe\fR" 4
.IX Item "eval or e"
Run an instruction.
.ie n .IP """trace"" or ""t""" 4
.el .IP "\f(CWtrace\fR or \f(CWt\fR" 4
.IX Item "trace or t"
Trace the next instruction.
.ie n .IP """print"" or ""p""" 4
.el .IP "\f(CWprint\fR or \f(CWp\fR" 4
.IX Item "print or p"
Print the interpreter registers.
.ie n .IP """stack"" or ""s""" 4
.el .IP "\f(CWstack\fR or \f(CWs\fR" 4
.IX Item "stack or s"
Examine the stack.
.ie n .IP """info""" 4
.el .IP "\f(CWinfo\fR" 4
.IX Item "info"
Print interpreter information.
.ie n .IP """quit"" or ""q""" 4
.el .IP "\f(CWquit\fR or \f(CWq\fR" 4
.IX Item "quit or q"
Exit the debugger.
.ie n .IP """help"" or ""h""" 4
.el .IP "\f(CWhelp\fR or \f(CWh\fR" 4
.IX Item "help or h"
Print the help.
.SS "Debug Ops"
.IX Subsection "Debug Ops"
You can also debug Parrot code by using the \f(CW\*(C`debug_init\*(C'\fR, \f(CW\*(C`debug_load\*(C'\fR
and \f(CW\*(C`debug_break\*(C'\fR ops in \fIops/debug.ops\fR.
.ie n .IP """int main(int argc, char *argv[])""" 4
.el .IP "\f(CWint main(int argc, char *argv[])\fR" 4
.IX Item "int main(int argc, char *argv[])"
Reads the \s-1PASM\s0 or \s-1PBC\s0 file from argv[1], loads it, and then calls
\&\fIParrot_debug()\fR.
.ie n .IP """static void PDB_add_exception_handler(Parrot_Interp)""" 4
.el .IP "\f(CWstatic void PDB_add_exception_handler(Parrot_Interp)\fR" 4
.IX Item "static void PDB_add_exception_handler(Parrot_Interp)"
Adds a default exception handler to \s-1PDB\s0.
.ie n .IP """static void PDB_printwelcome(void)""" 4
.el .IP "\f(CWstatic void PDB_printwelcome(void)\fR" 4
.IX Item "static void PDB_printwelcome(void)"
Prints out the welcome string.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsrc/debug.c\fR, \fIinclude/parrot/debug.h\fR.
.SH "HISTORY"
.IX Header "HISTORY"
.IP "\(bu" 4
Initial version by Daniel Grunblatt on 2002.5.19.
.IP "\(bu" 4
Start of rewrite \- leo 2005.02.16
.Sp
The debugger now uses it's own interpreter. User code is run in
Interp* debugee. We have:
.Sp
.Vb 4
\&  debug_interp\->pdb\->debugee\->debugger
\&    ^                            |
\&    |                            v
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\- := \-\-\-\-\-\-\-\-\-\-\-+
.Ve
.Sp
Debug commands are mostly run inside the \f(CW\*(C`debugger\*(C'\fR. User code
runs of course in the \f(CW\*(C`debugee\*(C'\fR.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Check the user input for bad commands, it's quite easy to make
it bang now, try listing the source before loading or disassembling it.
.IP "\(bu" 4
Print the interpreter info.
.IP "\(bu" 4
Make the user interface better (add comands
history/completion).
.IP "\(bu" 4
Some other things I don't remember now because it's late.
