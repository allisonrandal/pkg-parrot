/*
Copyright (C) 2001-2011, Parrot Foundation.

=head1 NAME

src/pmc/packfiledebug.pmc - Packfile Debug Segment PMC

=head1 DESCRIPTION

This class implements a PackfileDebug object, a segment of the .pbc
data file used for storing pir debug information.

See packfile.pmc for the toplevel Packfile interface, see packfilesegment.pmc
for the list of common methods every packfile segment pmc must implement; see
PDD13 for the design spec.

Initial and experimental version, using some vtables as a quick way of testing.

=head2 Vtable functions

=over 4

=cut

*/

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* HEADERIZER END: static */

pmclass PackfileDebug auto_attrs extends PackfileRawSegment {
    /* ConstantTable used for name lookup */
    ATTR PMC *const_table;

    /* Number of file mappings */
    ATTR INTVAL num_mappings;
    /* File name mapping */
    ATTR PMC *mapping_offset;
    ATTR PMC *mapping_filename;

/*

=item C<init>

Create empty PackfileDebug.

=cut

*/

    VTABLE void init() {
        SUPER();
        SET_ATTR_type(INTERP, SELF, PF_DEBUG_SEG);
        Parrot_warn_experimental(interp, "PackfileDebug is experimental");

        /* Don't initialize C<const_table>.  It will be set to NULL by
         * auto_attrs handling.  And should be set to proper PMC in
         * set_directory.
         */

        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void mark()>

Marks the object as live.

=cut

*/

    VTABLE void mark() {
        Parrot_PackfileDebug_attributes * const attrs =
                PARROT_PACKFILEDEBUG(SELF);

        Parrot_gc_mark_PMC_alive(INTERP, attrs->const_table);
        Parrot_gc_mark_PMC_alive(INTERP, attrs->mapping_offset);
        Parrot_gc_mark_PMC_alive(INTERP, attrs->mapping_filename);

        SUPER();
    }


/*

=item C<set_pointer>

Set pointer to underlying PackFile_ConstTable

=cut

*/

    VTABLE void set_pointer(void * pointer) {
        PackFile_Debug *p = (PackFile_Debug *) pointer;
        const INTVAL num_mappings = p->num_mappings;
        PMC * const mapping_offset = Parrot_pmc_new_init_int(INTERP,
                                                      enum_class_FixedIntegerArray, num_mappings);
        PMC * const mapping_filename = Parrot_pmc_new_init_int(INTERP,
                                                      enum_class_FixedIntegerArray, num_mappings);
        INTVAL i;

        SUPER(pointer);
        for (i = 0; i < num_mappings; ++i) {
            VTABLE_set_integer_keyed_int(INTERP, mapping_offset, i, p->mappings[i].offset);
            VTABLE_set_integer_keyed_int(INTERP, mapping_filename, i, p->mappings[i].filename);
        }
        SET_ATTR_num_mappings(INTERP, SELF, p->num_mappings);
        SET_ATTR_mapping_offset(INTERP, SELF, mapping_offset);
        SET_ATTR_mapping_filename(INTERP, SELF, mapping_filename);
    }

/*

=item C<void *get_pointer()>

Builds a Packfile_Debug segment for this PMC.

=cut

*/

    VTABLE void *get_pointer() {
        PackFile_Debug * const p = (PackFile_Debug *) mem_gc_realloc_n_typed(INTERP,
                                                           SUPER(), sizeof (PackFile_Debug), char);
        INTVAL num_mappings;
        PMC *mapping_offset;
        PMC *mapping_filename;
        INTVAL i;
        GET_ATTR_num_mappings(INTERP, SELF, num_mappings);
        GET_ATTR_mapping_offset(INTERP, SELF, mapping_offset);
        GET_ATTR_mapping_filename(INTERP, SELF, mapping_filename);
        p->num_mappings = num_mappings;
        p->mappings = mem_gc_allocate_n_typed(INTERP, num_mappings, PackFile_DebugFilenameMapping);
        for (i = 0; i < num_mappings; ++i) {
            p->mappings[i].offset = VTABLE_get_integer_keyed_int(INTERP, mapping_offset, i);
            p->mappings[i].filename = VTABLE_get_integer_keyed_int(INTERP, mapping_filename, i);
        }
        return p;
    }

/*

=item C<INTVAL get_integer()>

=item C<INTVAL elements()>

Get the number of filename mappings.

=cut

*/

    VTABLE INTVAL get_integer() {
        return STATICSELF.elements();
    }

    VTABLE INTVAL elements() {
        INTVAL num_mappings;
        GET_ATTR_num_mappings(INTERP, SELF, num_mappings);
        return num_mappings;
    }

/*

=item C<INTVAL get_pmc_keyed_int(INTVAL n)>


=item C<INTVAL get_integer_keyed_int(INTVAL n)>

Get the line mapping n.  If n is greater than C<elements()>, then the integer
version returns -1 and the PMC version returns PMCNULL;

=cut

*/

    VTABLE PMC *get_pmc_keyed_int(INTVAL n) {
        INTVAL line = STATICSELF.get_integer_keyed_int(n);
        if (line < 0)
            return PMCNULL;

        return Parrot_pmc_new_init_int(INTERP, enum_class_Integer, line);
    }

    VTABLE INTVAL get_integer_keyed_int(INTVAL n) {
        Parrot_PackfileDebug_attributes * const attrs =
                PARROT_PACKFILEDEBUG(SELF);

        if (n >= attrs->num_mappings)
            return -1;

        return VTABLE_get_integer_keyed_int(INTERP, attrs->mapping_offset, n);
    }

/*

=item C<INTVAL get_string_keyed_int(INTVAL n)>

Get the filename mapping n.  If C<set_directory()> has been used, this will
return the filename.  Otherwise it returns a string of the integer index into
the constant table.

=cut

*/

    VTABLE STRING *get_string_keyed_int(INTVAL n) {
        Parrot_PackfileDebug_attributes * const attrs =
                PARROT_PACKFILEDEBUG(SELF);
        INTVAL filename;

        if (n >= attrs->num_mappings)
            return STRINGNULL;

        filename = VTABLE_get_integer_keyed_int(INTERP,
                attrs->mapping_filename, n);

        if (attrs->const_table != PMCNULL)
            return VTABLE_get_string_keyed_int(INTERP,
                    attrs->const_table, filename);

        return Parrot_str_from_int(INTERP, filename);
    }

/*

=back

=head2 Methods

=over 4

=item C<void set_directory(PMC *directory)>

Find PackfileConstantTable in PackfileDirectory and use it to perform lookup
for filenames.

=cut

*/

    METHOD set_directory(PMC *directory) {
        Parrot_PackfileDebug_attributes * const attrs =
                PARROT_PACKFILEDEBUG(SELF);
        STRING * const const_table_str =
                Parrot_str_new_constant(INTERP, "PackfileConstantTable");
        PMC * const iter = VTABLE_get_iter(INTERP, directory);

        /* This should be SUPER(directory), but that doesn't work. */
        attrs->directory = directory;

        while (VTABLE_get_bool(INTERP, iter)) {
            STRING * const name = VTABLE_shift_string(INTERP, iter);
            PMC * const segment = VTABLE_get_pmc_keyed_str(INTERP, directory, name);
            if (VTABLE_isa(INTERP, segment, const_table_str)) {
                attrs->const_table = segment;
                break;
            }
        }
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4 cinoptions='\:2=2' :
 */
